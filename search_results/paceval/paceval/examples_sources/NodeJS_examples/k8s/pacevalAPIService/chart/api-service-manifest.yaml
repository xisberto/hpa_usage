---
# Source: apiservice/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: api-service-apiservice
  labels:
    helm.sh/chart: apiservice-0.1.0
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: apiservice/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: api-service-apiservice
  labels:
    helm.sh/chart: apiservice-0.1.0
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - paceval.com
    resources:
      - pacevalcomputationobjects
    verbs:
      - create
      - delete
      - get
      - list
      - watch
  - apiGroups:
      - paceval.com
    resources:
      - pacevalcomputationobjects/status
    verbs:
      - get
      - update
---
# Source: apiservice/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: api-service-apiservice
  labels:
    helm.sh/chart: apiservice-0.1.0
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  # You can specify more than one "subject"
  - kind: ServiceAccount
    name: api-service-apiservice
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: api-service-apiservice # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
# Source: apiservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-service-apiservice
  labels:
    helm.sh/chart: apiservice-0.1.0
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
---
# Source: apiservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service-apiservice
  labels:
    helm.sh/chart: apiservice-0.1.0
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: apiservice
      app.kubernetes.io/instance: api-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apiservice
        app.kubernetes.io/instance: api-service
    spec:
      serviceAccountName: api-service-apiservice
      securityContext:
        {}
      containers:
        - name: apiservice
          securityContext:
            {}
          image: "paceval/api-service:latest"
          imagePullPolicy: Always
          env:
            - name: REDIS_ADDRESS
              value: redis-master.redis.svc.cluster.local:6379
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 32Mi
---
# Source: apiservice/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-service-apiservice
  labels:
    helm.sh/chart: apiservice-0.1.0
    app.kubernetes.io/name: apiservice
    app.kubernetes.io/instance: api-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-service-apiservice
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: apiservice/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: delete-old-paceval-computation-objects
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: api-service-apiservice
          containers:
            - name: delete-old-paceval-computation-objects
              image: bitnami/kubectl:1.25.7
              command:
                - /bin/sh
                - -c
                - |
                  now=$(date +%s)
                  for obj in $(kubectl get pacevalcomputationobjects.paceval.com -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'); do
                    echo "object:$obj"
                    last_active_time=$(kubectl get pacevalcomputationobjects.paceval.com $obj -o=jsonpath='{.status.lastActiveTime}')
                    creation_time=$(kubectl get pacevalcomputationobjects.paceval.com $obj -o=jsonpath='{.metadata.creationTimestamp}')
                    if [ -z "$last_active_time" ]; then
                      echo "no active time"
                      creation_timestamp=$(date +%s -d "$creation_time")
                      age=$((now-creation_timestamp))
                      if [ $age -gt 600 ]; then
                        echo "age:$age"
                        kubectl delete pacevalcomputationobjects.paceval.com $obj
                      fi
                      continue
                    fi
                    echo "with active time"
                    last_active_timestamp=$(date +%s -d "$last_active_time")
                    active_age=$((now-last_active_timestamp))
                    if [ $active_age -gt 3600 ]; then
                      echo "active_age:$active_age"
                      kubectl delete pacevalcomputationobjects.paceval.com $obj
                    fi
                  done
          restartPolicy: OnFailure
